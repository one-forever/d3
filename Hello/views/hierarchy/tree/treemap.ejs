<% layout('layout') %>
<% block('header').append(`
    <style>

        body {
            font: 10px sans-serif;
            position: relative;
        }

        .node {
            box-sizing: border-box;
            position: absolute;
            overflow: hidden;
        }

        .node-label {
            padding: 4px;
            line-height: 1em;
            white-space: pre;
        }

        .node-value {
            color: rgba(0,0,0,0.8);
            font-size: 9px;
            margin-top: 1px;
        }

    </style>
`) %>


<script>

    let width = 960,
        height = 1060;

    let format = d3.format(",d");
    console.log('format: ', format);
    let color = d3.scaleOrdinal()
        .range(d3.schemeCategory10
            .map(function(c) { c = d3.rgb(c); c.opacity = 0.6; return c; }));
    console.log('color: ', color);
    let stratify = d3.stratify()
        .parentId(function(d) { return d.id.substring(0, d.id.lastIndexOf(".")); });
    console.log('stratify: ', stratify);
    let treemap = d3.treemap()
        .size([width, height])
        .padding(1)
        .round(true);
    console.log('treemap: ', treemap);
    d3.csv("/files/csv/flare", type, function(error, data) {
        if (error) throw error;
        console.log('data: ', data);
        data = [{id: "aaa", value: 0},

            {id: "aaa.analytics", value: 1},

            {id: 'aaa.aaa', value: 1},
            {id: 'aaa.ccc', value: 1},
            {id: 'aaa.ddd', value: 1},
            {id: 'aaa.eee', value:1},

        ]
        let root = stratify(data)
            .sum(function(d) { return d.value; })
            .sort(function(a, b) { return b.height - a.height || b.value - a.value; });
        console.log('root: ', root);
        treemap(root);
        d3.select("body")
            .selectAll(".node")
            .data(root.leaves())
            .enter().append("div")
            .attr("class", "node")
            .attr("title", function(d) { return d.id + "\n" + format(d.value); })
            .style("left", function(d) { return d.x0 + "px"; })
            .style("top", function(d) { return d.y0 + "px"; })
            .style("width", function(d) { return d.x1 - d.x0 + "px"; })
            .style("height", function(d) { return d.y1 - d.y0 + "px"; })
            .style("background", function(d) { while (d.depth > 1) d = d.parent; return color(d.id); })
            .append("div")
            .attr("class", "node-label")
            .text(function(d) { return d.id.substring(d.id.lastIndexOf(".") + 1).split(/(?=[A-Z][^A-Z])/g).join("\n"); })
            .append("div")
            .attr("class", "node-value")
            .text(function(d) { return format(d.value); });
    });

    function type(d) {
        d.value = +d.value;
        return d;
    }

</script>
